/*
 * Generated by ASN.1 Java Compiler (https://www.asnlab.org/)
 * From ASN.1 module "Platoon"
 */
package com.iot.nero.smartcan.entity.car;

import java.io.*;
import javax.validation.constraints.*;

import com.iot.nero.smartcan.entity.Platoon;
import org.asnlab.asndt.runtime.conv.*;
import org.asnlab.asndt.runtime.conv.annotation.*;
import org.asnlab.asndt.runtime.type.AsnType;

public class SmartRecognizeRequestMessage {

	@NotNull
	@Component(0)
	public Long msgCnt;

	@NotNull
	@Component(1)
	public byte[] token;

	@NotNull
	@Size(min=8, max=8)
	@Component(2)
	public byte[] recId;

	@NotNull
	@Component(3)
	public XTypeEnum xType;

	@NotNull
	@Component(4)
	public Double dist;

	@NotNull
	@Component(5)
	public Double direct;

	@NotNull
	@Component(6)
	public Double speed;

	@NotNull
	@Component(7)
	public Double longAngle;

	@NotNull
	@Component(8)
	public Double latAngle;

	@NotNull
	@Component(9)
	public Double yawAngle;

	@NotNull
	@Component(10)
	public Position3D position;

	@NotNull
	@Component(11)
	public byte[] timestamp;

	@NotNull
	@Component(12)
	public Long syncNum;


	public boolean equals(Object obj) {
		if(!(obj instanceof SmartRecognizeRequestMessage)){
			return false;
		}
		return TYPE.equals(this, obj, CONV);
	}

	public void ber_encode(OutputStream out) throws IOException {
		TYPE.encode(this, EncodingRules.BASIC_ENCODING_RULES, CONV, out);
	}

	public static SmartRecognizeRequestMessage ber_decode(InputStream in) throws IOException {
		return (SmartRecognizeRequestMessage)TYPE.decode(in, EncodingRules.BASIC_ENCODING_RULES, CONV);
	}


	public final static AsnType TYPE = Platoon.type(65599);

	public final static CompositeConverter CONV;

	static {
		CONV = new AnnotationCompositeConverter(SmartRecognizeRequestMessage.class);
		AsnConverter msgCntConverter = MsgCount.CONV;
		AsnConverter tokenConverter = Token.CONV;
		AsnConverter recIdConverter = OctetStringConverter.INSTANCE;
		AsnConverter xTypeConverter = XTypeEnum.CONV;
		AsnConverter distConverter = FLOAT.CONV;
		AsnConverter directConverter = FLOAT.CONV;
		AsnConverter speedConverter = MovementSpeed.CONV;
		AsnConverter longAngleConverter = ANGLE.CONV;
		AsnConverter latAngleConverter = ANGLE.CONV;
		AsnConverter yawAngleConverter = ANGLE.CONV;
		AsnConverter positionConverter = Position3D.CONV;
		AsnConverter timestampConverter = TimeStamp.CONV;
		AsnConverter syncNumConverter = LongConverter.INSTANCE;
		CONV.setComponentConverters(new AsnConverter[] { msgCntConverter, tokenConverter, recIdConverter, xTypeConverter, distConverter, directConverter, speedConverter, longAngleConverter, latAngleConverter, yawAngleConverter, positionConverter, timestampConverter, syncNumConverter });
	}


}
